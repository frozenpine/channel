// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HubServiceClient is the client API for HubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubServiceClient interface {
	GetTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Topics, error)
	Subscribe(ctx context.Context, in *ReqSub, opts ...grpc.CallOption) (HubService_SubscribeClient, error)
	UnSubscribe(ctx context.Context, in *ReqUnSub, opts ...grpc.CallOption) (*RspInfo, error)
}

type hubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubServiceClient(cc grpc.ClientConnInterface) HubServiceClient {
	return &hubServiceClient{cc}
}

func (c *hubServiceClient) GetTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Topics, error) {
	out := new(Topics)
	err := c.cc.Invoke(ctx, "/protocol.HubService/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) Subscribe(ctx context.Context, in *ReqSub, opts ...grpc.CallOption) (HubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &HubService_ServiceDesc.Streams[0], "/protocol.HubService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HubService_SubscribeClient interface {
	Recv() (*RtnData, error)
	grpc.ClientStream
}

type hubServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *hubServiceSubscribeClient) Recv() (*RtnData, error) {
	m := new(RtnData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubServiceClient) UnSubscribe(ctx context.Context, in *ReqUnSub, opts ...grpc.CallOption) (*RspInfo, error) {
	out := new(RspInfo)
	err := c.cc.Invoke(ctx, "/protocol.HubService/UnSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubServiceServer is the server API for HubService service.
// All implementations must embed UnimplementedHubServiceServer
// for forward compatibility
type HubServiceServer interface {
	GetTopics(context.Context, *emptypb.Empty) (*Topics, error)
	Subscribe(*ReqSub, HubService_SubscribeServer) error
	UnSubscribe(context.Context, *ReqUnSub) (*RspInfo, error)
	mustEmbedUnimplementedHubServiceServer()
}

// UnimplementedHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHubServiceServer struct {
}

func (UnimplementedHubServiceServer) GetTopics(context.Context, *emptypb.Empty) (*Topics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (UnimplementedHubServiceServer) Subscribe(*ReqSub, HubService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedHubServiceServer) UnSubscribe(context.Context, *ReqUnSub) (*RspInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribe not implemented")
}
func (UnimplementedHubServiceServer) mustEmbedUnimplementedHubServiceServer() {}

// UnsafeHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServiceServer will
// result in compilation errors.
type UnsafeHubServiceServer interface {
	mustEmbedUnimplementedHubServiceServer()
}

func RegisterHubServiceServer(s grpc.ServiceRegistrar, srv HubServiceServer) {
	s.RegisterService(&HubService_ServiceDesc, srv)
}

func _HubService_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.HubService/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetTopics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqSub)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServiceServer).Subscribe(m, &hubServiceSubscribeServer{stream})
}

type HubService_SubscribeServer interface {
	Send(*RtnData) error
	grpc.ServerStream
}

type hubServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *hubServiceSubscribeServer) Send(m *RtnData) error {
	return x.ServerStream.SendMsg(m)
}

func _HubService_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUnSub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.HubService/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UnSubscribe(ctx, req.(*ReqUnSub))
	}
	return interceptor(ctx, in, info, handler)
}

// HubService_ServiceDesc is the grpc.ServiceDesc for HubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.HubService",
	HandlerType: (*HubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopics",
			Handler:    _HubService_GetTopics_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _HubService_UnSubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _HubService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
